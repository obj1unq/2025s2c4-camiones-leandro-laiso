import camion.*
import cosas.*

describe "Cosas" {

    test "knightRider" {
        assert.equals(500, knightRider.peso())
        assert.equals(10, knightRider.nivelPeligrosidad())
    }

    test "arenaAGranel" {
        arenaAGranel.peso(50)
        assert.equals(50, arenaAGranel.peso())
        assert.equals(1, arenaAGranel.nivelPeligrosidad())
    }

    test "bumblebee (auto)" {
        bumblebee.transformarEnAuto()
        assert.equals(800, bumblebee.peso())
        assert.equals(15, bumblebee.nivelPeligrosidad())
    }

    test "bumblebee (robot)" {
        bumblebee.transformarEnRobot()
        assert.equals(800, bumblebee.peso())
        assert.equals(30, bumblebee.nivelPeligrosidad())
    }

    test "paqueteLadrillos (10 ladrillos)" {
        paqueteLadrillos.cantLadrillos(10)
        assert.equals(20, paqueteLadrillos.peso())
        assert.equals(2, paqueteLadrillos.nivelPeligrosidad())
    }

    test "paqueteLadrillos (598 ladrillos)" {
        paqueteLadrillos.cantLadrillos(598)
        assert.equals(1196, paqueteLadrillos.peso())
        assert.equals(2, paqueteLadrillos.nivelPeligrosidad())
    }

    test "bateriaAntiaerea (sin Misiles)" {
        bateriaAntiaerea.descargarMisiles()
        assert.equals(200, bateriaAntiaerea.peso())
        assert.equals(0, bateriaAntiaerea.nivelPeligrosidad())
    }

    test "bateriaAntiaerea (con Misiles)" {
        bateriaAntiaerea.cargarMisiles()
        assert.equals(300, bateriaAntiaerea.peso())
        assert.equals(100, bateriaAntiaerea.nivelPeligrosidad())
    }

    test "residuosRadiactivos" {
        residuosRadiactivos.peso(5015)
        assert.equals(5015, residuosRadiactivos.peso())
        assert.equals(200, residuosRadiactivos.nivelPeligrosidad())
    }
}

describe "Carga y descarga" {

    test "Cargar una cosa y ver si est√° cargada" {
        camion.cargar(knightRider)
        assert.that(camion.estaCargado(knightRider))
    }

    test "Descargar una cosa y ver que no siga cargada" {
        camion.cargar(knightRider)
        camion.descargar(knightRider)
        assert.notThat(camion.estaCargado(knightRider))
    }

    test "No se puede cargar algo ya cargado" {
        camion.cargar(knightRider)
        assert.throwsException({camion.cargar(knightRider)})
    }

    test "No se puede descargar algo no cargado" {
        assert.throwsException({camion.descargar(knightRider)})
    }

    test "Ejemplo del ejercicio" {
        camion.cargar(bumblebee)
        assert.equals(#{bumblebee}, camion.cosas())
        camion.cargar(knightRider)
        assert.equals(#{knightRider, bumblebee}, camion.cosas())
        camion.descargar(bumblebee)
        assert.equals(#{knightRider}, camion.cosas())
        assert.throwsException({ camion.cargar(knightRider) })
        assert.throwsException({ camion.descargar(bumblebee) })
    }
}

describe "Todo peso par" {
    
    test "Bumblebee y 50kg de arena da true" {
        camion.cargar(bumblebee)
        arenaAGranel.peso(50)
        camion.cargar(arenaAGranel)
        assert.that(camion.todoPesoPar())
    }

    test "Bumblebee y 51kg de arena da false" {
        camion.cargar(bumblebee)
        arenaAGranel.peso(51)
        camion.cargar(arenaAGranel)
        assert.notThat(camion.todoPesoPar())
    }
}

describe "Hay alguno que pesa..." {
    
    method initialize() {
        camion.cargar(bumblebee)
        arenaAGranel.peso(50)
        camion.cargar(arenaAGranel)
    }

    test "Preguntar si hay algo de 50 da true" {
        assert.that(camion.hayAlgoQuePesa(50))
    }

    test "Preguntar si hay algo de 800 da true" {
        assert.that(camion.hayAlgoQuePesa(800))
    }

    test "Preguntar si hay algo de 500 da false" {
        assert.notThat(camion.hayAlgoQuePesa(500))
    }
}